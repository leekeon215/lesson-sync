package com.lessonsync.app.ui.screens

import android.content.Context
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.MusicNote
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.lessonsync.app.ui.theme.LessonSyncTheme
import org.json.JSONObject

// Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§ ÏòàÏãú
data class LessonSummaryItem(val title: String, val content: String)
data class PracticeTip(val category: String, val points: List<String>)

val sampleSummary = listOf(
    LessonSummaryItem("Î†àÏä® ÏùºÏãú", "2025ÎÖÑ 5Ïõî 8Ïùº (Ïàò)\n1ÏãúÍ∞Ñ 30Î∂Ñ"),
    LessonSummaryItem("Ï¥ùÌèâ Î∞è ÌîºÎìúÎ∞± ÏöîÏïΩ",
        "‚Ä¢ ÌôúÏùò Í∞ÅÎèÑÏôÄ ÏÜçÎèÑ Ï°∞Ï†àÏù¥ Î∂àÍ∑†ÌòïÌïú Íµ¨Í∞ÑÏù¥ ÏûàÏùå\n  ‚Üí Î≥¥Ïö∞ Ïª®Ìä∏Î°§ Í∞ïÌôî ÌïÑÏöî\n‚Ä¢ ÏôºÏÜê Ìè¨ÏßÄÏÖò Ïù¥Îèô Ïãú ÏùåÏ†ïÏù¥ ÌùîÎì§Î¶º\n  ‚Üí ÎäêÎ¶∞ ÌÖúÌè¨ Î∞òÎ≥µ Ïó∞Ïäµ\n‚Ä¢ Ï†ÑÏ≤¥Ï†ÅÏù∏ ÌëúÌòÑÎ†•ÏùÄ Ìñ•ÏÉÅÎêòÍ≥† ÏûàÏúºÎ©∞, ÏïÑÌã∞ÌÅòÎ†àÏù¥ÏÖòÏóê Îçî ÏßëÏ§ëÌï† ÌïÑÏöî ÏûàÏùå"),
)
val samplePracticeTips = listOf(
    PracticeTip("Ïó∞Ï£º Í∏∞Ïà† Ï†êÍ≤Ä", listOf(
        "Ìôú Ïö¥Ïö©: ÌôúÏùò Ï§ëÏã¨Îßå ÏÇ¨Ïö©ÌïòÎ†§Îäî Í≤ΩÌñ•Ïù¥ ÏûàÏùå ‚Üí ÎÅùÍπåÏßÄ ÌôúÏö©Ìï¥ Í∑†Ìòï Ïû°Ìûå ÏÜåÎ¶¨ ÎÇ¥Í∏∞",
        "ÎπÑÎ∏åÎùºÌÜ†: ÏÜçÎèÑÍ∞Ä Îπ†Î•¥Í≥† ÏùºÏ†ïÌïòÏßÄ ÏïäÏùå ‚Üí Î©îÌä∏Î°úÎÜàÍ≥º Ìï®Íªò ÏùºÏ†ïÌïú ÏßÑÎèô Ïó∞Ïäµ"
    )),
    PracticeTip("ÎßàÎîîÎ≥Ñ Ï£ºÏùòÏÇ¨Ìï≠", listOf(
        "1-4ÎßàÎîî: ÌÖåÎßà ÎèÑÏûÖÎ∂Ä - ÌôúÏù¥ ÏßßÍ≤å ÏõÄÏßÅÏù¥Î©∞ ÏùåÏù¥ ÏûëÏùå ‚Üí Í∏¥ ÌôúÎ°ú ÌíçÎ∂ÄÌïòÍ≤å Ïó∞Ï£º",
        "9-12ÎßàÎîî: Î¶¨Îì¨ Î∂àÍ∑†Ìòï - Ï†êÏùåÌëúÏôÄ 16Î∂ÑÏùåÌëú Íµ¨Î∂Ñ Ïïà Îê® ‚Üí Î¶¨Îì¨ Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ ÌïÑÏöî",
        "13-16ÎßàÎîî: ÎπÑÎ∏åÎùºÌÜ† ÎÑàÎ¨¥ Îπ†Î•¥Í≥† Ï¢ÅÏùå ‚Üí ÎäêÎ¶¨Í≥† ÎÑìÏùÄ ÏßÑÎèôÏúºÎ°ú Ïó∞Ïäµ",
        "25-28ÎßàÎîî: Ïä¨Îü¨ ÏùåÏ†ï Î∂àÏïàÏ†ï ‚Üí ÏôºÏÜê ÏïïÎ†• ÏùºÏ†ïÌïòÍ≤å Ïú†ÏßÄÌïòÎ©∞ Ïó∞Ïäµ",
        "29-32ÎßàÎîî: ÌîÑÎ†àÏù¥Ïßï ÎßàÎ¨¥Î¶¨ ÌùêÎ¶º ‚Üí Ìò∏Ìù°Í≥º Îã§Ïù¥ÎÇ¥ÎØπ Ï†ïÎ¶¨ ÌïÑÏöî"
    ))
)


//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun ReviewScreen(navController: NavHostController, scoreId: String) {
//    // TODO: scoreIdÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïã§Ï†ú Î†àÏä® ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
//    val lessonTitle = "Î∞îÏù¥Ïò¨Î¶∞ Î†àÏä® ÏöîÏïΩ" // ÏòàÏãú Ï†úÎ™©
//
//    Scaffold(
//        topBar = {
//            TopAppBar(
//                title = { Text(lessonTitle) },
//                navigationIcon = {
//                    IconButton(onClick = { navController.popBackStack() }) {
//                        Icon(Icons.AutoMirrored.Filled.ArrowBack, "Îí§Î°ú Í∞ÄÍ∏∞")
//                    }
//                },
//                colors = TopAppBarDefaults.topAppBarColors(
//                    containerColor = MaterialTheme.colorScheme.surfaceContainerLowest,
//                    titleContentColor = MaterialTheme.colorScheme.onSurface,
//                    navigationIconContentColor = MaterialTheme.colorScheme.onSurface
//                )
//            )
//        },
//        containerColor = MaterialTheme.colorScheme.background
//    ) { paddingValues ->
//        LazyColumn(
//            modifier = Modifier
//                .fillMaxSize()
//                .padding(paddingValues)
//                .padding(horizontal = 16.dp, vertical = 8.dp),
//            verticalArrangement = Arrangement.spacedBy(16.dp)
//        ) {
//            item {
//                Row(verticalAlignment = Alignment.CenterVertically) {
//                    Icon(
//                        imageVector = Icons.Filled.MusicNote, // ÏòàÏãú ÏïÑÏù¥ÏΩò
//                        contentDescription = null,
//                        tint = MaterialTheme.colorScheme.primary,
//                        modifier = Modifier.size(36.dp)
//                    )
//                    Spacer(modifier = Modifier.width(8.dp))
//                    Text(
//                        text = lessonTitle, // "üéª Î∞îÏù¥Ïò¨Î¶∞ Î†àÏä® ÏöîÏïΩ" ÏôÄ Í∞ôÏùÄ ÌòïÌÉúÎ°úÎèÑ Í∞ÄÎä•
//                        style = MaterialTheme.typography.headlineSmall,
//                        fontWeight = FontWeight.Bold
//                    )
//                }
//                Spacer(modifier = Modifier.height(8.dp))
//            }
//
//            items(sampleSummary) { item ->
//                SummarySection(title = item.title, content = item.content)
//            }
//
//            item { HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp)) }
//
//            items(samplePracticeTips) { tip ->
//                PracticeTipSection(category = tip.category, points = tip.points)
//            }
//
//            item { Spacer(modifier = Modifier.height(16.dp)) } // ÌïòÎã® Ïó¨Î∞±
//        }
//    }
//}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ReviewScreen(navController: NavHostController, scoreId: String) {
    val context = LocalContext.current
    var summaryText by remember { mutableStateOf("ÏöîÏïΩÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...") }
    var speechSegments by remember { mutableStateOf<List<String>>(emptyList()) }

    LaunchedEffect(scoreId) {
        val prefs = context.getSharedPreferences("LessonSyncPrefs", Context.MODE_PRIVATE)
        val jsonString = prefs.getString("summaryJson_$scoreId", null)

        if (jsonString != null) {
            try {
                val json = JSONObject(jsonString)
                summaryText = json.optString("summary", "ÏöîÏïΩ ÏóÜÏùå")
                val segmentsArray = json.optJSONArray("speech_segments")
                if (segmentsArray != null) {
                    val segments = mutableListOf<String>()
                    for (i in 0 until segmentsArray.length()) {
                        segments.add(segmentsArray.getString(i))
                    }
                    speechSegments = segments
                }
            } catch (e: Exception) {
                summaryText = "ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞Î•º Ìï¥ÏÑùÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§."
            }
        } else {
            summaryText = "ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Î∞õÏùÄ ÏöîÏïΩ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§."
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Î†àÏä® ÏöîÏïΩ Î≥¥Í∏∞") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞")
                    }
                }
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp, vertical = 12.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                Text("üìù Î†àÏä® ÏöîÏïΩ", style = MaterialTheme.typography.titleLarge)
                Text(summaryText)
            }

            if (speechSegments.isNotEmpty()) {
                item {
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("üéôÔ∏è Î∞úÌôî Íµ¨Í∞Ñ", style = MaterialTheme.typography.titleLarge)
                }

                items(speechSegments) { segment ->
                    Text("‚Ä¢ $segment", style = MaterialTheme.typography.bodyLarge)
                }
            }
        }
    }
}


@Composable
fun SummarySection(title: String, content: String) {
    Column {
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.SemiBold,
            color = MaterialTheme.colorScheme.primary
        )
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = content,
            style = MaterialTheme.typography.bodyLarge,
            lineHeight = 22.sp // Ï§Ñ Í∞ÑÍ≤© Ï°∞Ï†à
        )
    }
}

@Composable
fun PracticeTipSection(category: String, points: List<String>) {
    Column {
        Text(
            text = category,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.SemiBold,
            color = MaterialTheme.colorScheme.secondary
        )
        Spacer(modifier = Modifier.height(4.dp))
        points.forEach { point ->
            Text(
                text = "‚Ä¢ $point", // Î∂àÎ¶ø Ìè¨Ïù∏Ìä∏
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.padding(bottom = 4.dp),
                lineHeight = 22.sp
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun ReviewScreenPreview() {
    LessonSyncTheme {
        ReviewScreen(navController = rememberNavController(), scoreId = "1")
    }
}